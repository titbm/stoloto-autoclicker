// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
let isSearching = false;
let searchMode = 'half'; // –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
async function clearSelection() {
    // –ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å"
    const clearButton = Array.from(document.querySelectorAll('button')).find(btn => 
        btn.textContent.trim() === '–û—á–∏—Å—Ç–∏—Ç—å'
    );
    
    if (clearButton) {
        clearButton.click();
        await new Promise(resolve => setTimeout(resolve, 500));
        return true;
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º
async function clickNumbers(numbers, mode, excludeNumbers = []) {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —á–∏—Å–ª–∞–º–∏:', numbers, '–∏—Å–∫–ª—é—á–∞—è:', excludeNumbers, '—Ä–µ–∂–∏–º:', mode);
    isSearching = true;
    searchMode = mode;

    // –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å —á–∏—Å–ª–∞–º–∏
    function waitForNumberButtons() {
        return new Promise((resolve) => {
            const checkButtons = () => {
                const allButtons = document.querySelectorAll('button');
                if (allButtons.length > 0) {
                    resolve();
                } else {
                    setTimeout(checkButtons, 500);
                }
            };
            checkButtons();
        });
    }

    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞
    async function selectNumbers() {
        await waitForNumberButtons();
        
        for (const num of numbers) {
            if (!isSearching) return false;

            const buttons = Array.from(document.querySelectorAll('button'));
            const button = buttons.find(btn => {
                const text = btn.textContent.trim();
                return text === num.toString();
            });
            
            if (button) {
                console.log('–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —á–∏—Å–ª–æ:', num);
                button.click();
                // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 250–º—Å –¥–æ 1000–º—Å
                const delay = Math.floor(Math.random() * (1000 - 250 + 1)) + 250;
                console.log(`–ñ–¥–µ–º ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            } else {
                console.log('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —á–∏—Å–ª–∞:', num);
            }
        }

        if (!isSearching) return false;

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º "–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã"
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const showTicketsButton = Array.from(document.querySelectorAll('button')).find(btn => 
            btn.textContent.trim() === '–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã'
        );
        
        if (showTicketsButton) {
            console.log('–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã"');
            showTicketsButton.click();
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤
            await new Promise(resolve => setTimeout(resolve, 1000));
            return true;
        } else {
            console.log('–ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–ª–µ—Ç–∞
    function analyzeTicket(ticket, numbers) {
        const allNumbers = Array.from(ticket.querySelectorAll('[data-test-id="number"], [data-test-id="selected-number"]'));
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ 9 (–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ 9 —á–∏—Å–µ–ª)
        const rows = [];
        for (let i = 0; i < allNumbers.length; i += 9) {
            rows.push(allNumbers.slice(i, i + 9));
        }
        
        if (rows.length !== 6) {
            console.log('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –±–∏–ª–µ—Ç–µ');
            return false;
        }

        console.log('–ê–Ω–∞–ª–∏–∑ –±–∏–ª–µ—Ç–∞:', ticket.querySelector('[data-test-id="ticket-number"]')?.textContent);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –±–∏–ª–µ—Ç–∞
        const ticketNumbers = rows
            .flat()
            .map(num => parseInt(num.textContent.trim()))
            .filter(num => !isNaN(num));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —á–∏—Å–µ–ª –≤ –±–∏–ª–µ—Ç–µ
        if (excludeNumbers.length > 0) {
            const hasExcluded = excludeNumbers.some(num => ticketNumbers.includes(parseInt(num)));
            if (hasExcluded) {
                console.log('‚ùå –í –±–∏–ª–µ—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —á–∏—Å–ª–∞');
                return false;
            }
        }

        switch (searchMode) {
            case 'row': {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                for (const row of rows) {
                    const rowNumbers = row
                        .map(num => parseInt(num.textContent.trim()))
                        .filter(num => !isNaN(num));
                        
                    const allInRow = numbers.every(num => rowNumbers.includes(parseInt(num)));
                    if (allInRow) {
                        console.log('‚úÖ –í—Å–µ —á–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ!');
                        return true;
                    }
                }
                return false;
            }
            case 'half': {
                // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
                const firstHalf = rows.slice(0, 3)
                    .flat()
                    .map(num => parseInt(num.textContent.trim()))
                    .filter(num => !isNaN(num));

                // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
                const secondHalf = rows.slice(3)
                    .flat()
                    .map(num => parseInt(num.textContent.trim()))
                    .filter(num => !isNaN(num));

                console.log('–ß–∏—Å–ª–∞ –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ:', firstHalf);
                console.log('–ß–∏—Å–ª–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ:', secondHalf);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
                const allInFirstHalf = numbers.every(num => firstHalf.includes(parseInt(num)));
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
                const allInSecondHalf = numbers.every(num => secondHalf.includes(parseInt(num)));

                if (allInFirstHalf) console.log('‚úÖ –í—Å–µ —á–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ!');
                if (allInSecondHalf) console.log('‚úÖ –í—Å–µ —á–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ!');

                return allInFirstHalf || allInSecondHalf;
            }
            case 'anywhere': {
                const allFound = numbers.every(num => ticketNumbers.includes(parseInt(num)));
                if (allFound) console.log('‚úÖ –í—Å–µ —á–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∏–ª–µ—Ç–µ!');
                return allFound;
            }
            default:
                console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:', searchMode);
                return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
    async function findSuitableTicket(numbers) {
        while (isSearching) {
            // –ò—â–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã
            const tickets = document.querySelectorAll('button[class*="Ticket_btn"]');
            console.log(`\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${tickets.length} –±–∏–ª–µ—Ç–æ–≤...`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–∏–ª–µ—Ç
            for (const ticket of tickets) {
                if (!isSearching) return false;
                
                if (analyzeTicket(ticket, numbers)) {
                    console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–∏–ª–µ—Ç!');
                    console.log('–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞');
                    ticket.click();
                    return true;
                }
            }
            
            if (!isSearching) return false;
            
            console.log('‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–π –±–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            
            const otherTicketsButton = Array.from(document.querySelectorAll('button')).find(
                btn => btn.textContent.trim() === '–î—Ä—É–≥–∏–µ –±–∏–ª–µ—Ç—ã'
            );
            
            if (otherTicketsButton) {
                console.log('–ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –±–∏–ª–µ—Ç—ã...');
                otherTicketsButton.click();
                await new Promise(resolve => setTimeout(resolve, 1500));
            } else {
                console.log('–ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∏–µ –±–∏–ª–µ—Ç—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                break;
            }
        }
        return false;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    const numbersSelected = await selectNumbers();
    if (numbersSelected && isSearching) {
        await findSuitableTicket(numbers);
    }
}

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup.js
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', request);
    if (request.action === 'clickNumbers') {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
        clearSelection().then(() => {
            clickNumbers(request.numbers, request.mode, request.excludeNumbers || []);
            sendResponse({status: 'success'});
        });
        return true;
    } else if (request.action === 'stopSearch') {
        console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        isSearching = false;
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        clearSelection().then(() => {
            sendResponse({status: 'stopped'});
            setTimeout(() => window.location.reload(), 100);
        });
        return true;
    }
});
